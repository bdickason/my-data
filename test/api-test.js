// Generated by CoffeeScript 1.6.3
/*
    Tests for HTTP API 
    Test Framework: Mocha (http://visionmedia.github.io/mocha/)
    Assertions: Should (https://github.com/visionmedia/should.js/)
*/


(function() {
  var Api, api, cfg, should;

  Api = (require('../server/api.js')).Api;

  cfg = require('../cfg/config.js');

  should = require('should');

  api = new Api(cfg);

  beforeEach(function() {});

  describe('API GET - Get a given key', function() {
    before(function() {
      var _request;
      _request = {
        params: ['email'],
        body: {
          "personal": "dickason@gmail.com",
          "work": "brad1@shapeways.com"
        }
      };
      return api.set(_request);
    });
    it('should accept a request for no parameters (/)', function(done) {
      var _req, _res;
      _req = {
        params: ['']
      };
      _res = {
        json: function(status, data) {
          status.should.equal(200);
          data.should.not.be["null"];
          console.log(data);
          data.should.be.a('object');
          return done();
        },
        send: function(status, data) {
          status.should.not.equal(404);
          return done();
        }
      };
      return api.get(_req, _res);
    });
    it('should accept a request for one parameter (email)', function(done) {
      var _req, _res;
      _req = {
        params: ['email']
      };
      _res = {
        json: function(status, data) {
          status.should.equal(200);
          data.should.not.be["null"];
          data.should.be.a('object');
          return done();
        },
        send: function(status, data) {
          status.should.not.equal(404);
          return done();
        }
      };
      return api.get(_req, _res);
    });
    return it('should accept a request for many parameters (email/personal)', function(done) {
      var _req, _res;
      _req = {
        params: ['email/personal']
      };
      _res = {
        json: function(status, data) {
          status.should.equal(200);
          data.should.not.be["null"];
          data.should.be.a('string');
          return done();
        },
        send: function(status, data) {
          status.should.not.equal(404);
          return done();
        }
      };
      return api.get(_req, _res);
    });
  });

  describe('API parseUrl - Parameter Parsing', function() {
    it('should not replace any characters in a single string.', function(done) {
      var parameters, parametersExpected, _parameters;
      _parameters = ['name'];
      parametersExpected = ['name'];
      parameters = api.parseUrl(_parameters[0]);
      parameters.should.eql(parametersExpected);
      return done();
    });
    it('should replace a single / in a string', function(done) {
      var parameters, parametersExpected, _parameters;
      _parameters = ['name/first'];
      parametersExpected = ['name', 'first'];
      parameters = api.parseUrl(_parameters[0]);
      parameters.should.eql(parametersExpected);
      return done();
    });
    return it('should replace a single / in a string', function(done) {
      var parameters, parametersExpected, _parameters;
      _parameters = ['name/first/initial'];
      parametersExpected = ['name', 'first', 'initial'];
      parameters = api.parseUrl(_parameters[0]);
      parameters.should.eql(parametersExpected);
      return done();
    });
  });

}).call(this);
